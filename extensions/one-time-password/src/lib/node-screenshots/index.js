/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync } = require('fs')
const { join } = require('path');
const { environment } = require('@raycast/api');

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

switch (platform) {
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(environment.assetsPath, 'bin', 'node-screenshots.win32-x64-msvc.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require(join(environment.assetsPath, 'bin', 'node-screenshots.win32-x64-msvc.node'));
          } else {
            //nativeBinding = require('node-screenshots-win32-x64-msvc');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'ia32':
        localFileExisted = existsSync(join(environment.assetsPath, 'bin', 'node-screenshots.win32-ia32-msvc.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require(join(environment.assetsPath, 'bin', 'node-screenshots.win32-ia32-msvc.node'));
          } else {
            //nativeBinding = require('node-screenshots-win32-ia32-msvc');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm64':
        localFileExisted = existsSync(join(environment.assetsPath, 'bin', 'node-screenshots.win32-arm64-msvc.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require(join(environment.assetsPath, 'bin', 'node-screenshots.win32-arm64-msvc.node'));
          } else {
            //nativeBinding = require('node-screenshots-win32-arm64-msvc');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

const { Image, Monitor, Window } = nativeBinding;

module.exports.Image = Image;
module.exports.Monitor = Monitor;
module.exports.Window = Window;
